===============================
1. init
===============================
1) 全局变量
 git config --global user.name "xxxx"
 git config --global user.email "xxxx"
 git config --global color.ui "always"

2) 初始化
 git init	# 创建了.git 文件夹,跟踪管理版本库的,不要手动修改

3) 设置忽略文件
 .gitignore 	# 文本文件，每个人都忽略
 ./git/info/exclude	# 自己需要忽略的


===============================
2. 日常操作
===============================
1) 添加新文件到版本库
 git add test.txt
 git add *.txt
 git add .  # 添加所有文件，包括子目录，但不包括空目录

2) 提交
 git commit -m "xxxxx" 
 git commit -m "xxxxx" -a 	# 提交所有
 git commit -m "xxxxx" test.txt	# 仅提交一个
 git commit -C head -a --amend  # 不会产生新的提交历史

3) 撤销修改
 撤销尚未提交的
 git checkout head test.txt	# 撤销一个
 git checkout head *.txt	# 撤销所有txt
 git checkout head .	        # 撤销所有
 
 撤销已提交
 git reset --hard HEAD^		# 回到上个版本
 git reset --hard 1525b		# 回到commit上提交的版本号

4) 分支
 git branch
 git branch -a # 列出所有
 git branch -m <oldname> <newname>	# 重命名分支，不会覆盖已存在的分支
 git branch -M <oldname> <newname>	# 重命名分支，会覆盖已存在的分支
 git branch <branch name>	# 创建新的分支
 git checkout <branch name>	# 转换分支
 git checkout -b <branch name>	# 创建并转换
 
 合并
 git merge <branch name>	# 合并提交，有冲突不会提交
 git merge --no-commit 		# 合并不提交，但是 no-commit 没有生效
 git merge --squash <branch name>	# 压合合并提交
 git merge --squash --no-commit <branch name> 

 删除
 git branch -d <branch name>	# 删除，没有合并会失败
 git branch -D <branch name>	# 强制删除

5) 冲突,删除
 冲突时编辑,重新提交
 
    当你要删除文件的时候，可以采用命令：rm test.txt
    
    这个时候（也就是说这个时候只执行了rm test.txt）有两种情况
    
    第一种情况:的确要把test.txt删掉，那么可以执行
                       git rm test.txt
                       git commit -m "remove test.txt"
                       然后文件就被删掉了
    
    第二种情况:删错文件了，不应该删test.txt，注意这时只执行了rm test.txt，还没有提交，所以可以执行git checkout test.txt将文件恢复。
    
    并不是说执行完git commit -m "remove test.txt"后还能用checkout恢复，commit之后版本库里的文件也没了，自然没办法用checkout恢复，而是要用其他的办法

6) 标签
 git tag v1.0	# 最近一次提交创建tag
 git tag v0.9 c0efddc	# 某次历史提交创建tag
 git branch <branch name> v2.0	# 由标签创建发分支
 git tag	# 显示tag
 git show v0.9	# 显示tag详情
 git tag -d v1.0	# 删除标签
 git checkout v1.0	# 转换标签
 
    git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    git tag可以查看所有标签。

    git push origin <tagname>可以推送一个本地标签；

    git push origin --tags可以推送全部未推送过的本地标签；

    git tag -d <tagname>可以删除一个本地标签；

    git push origin :refs/tags/<tagname>可以删除一个远程标签。


7) 查看状态
 git status 	# 当前状态
 git log	
 git reflog	# 操作历史
 git log --pretty=oneline
 git log --pretty=oneline --abbrev-commit
 git log --graph	# 看到分支合并图
 gitk # 当前分支历史记录
 gitk <branch name>	# 某分支历史记录
 gitk --all		# 所有分支
 git branch -v

8) 其他
 导出版本库
 git archive --format=zip head>git.zip
 git archive --format=zip --prefix=v1.0/ head>git.zip
